name: Build, Test, and Deploy

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Use Node.js 20
      uses: actions/setup-node@v2
      with:
        node-version: 20

    - name: Install dependencies
      run: npm install

    - name: Build
      run: npm run build

    - name: Test
      run: npm test

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Build Docker Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/docker_react:latest .
      if: always()

    - name: Push Docker Image
      run: |
        echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{secrets.DOCKERHUB_PWD}}
        docker push ${{ secrets.DOCKER_USERNAME }}/docker_react:latest

    - name: Send Telegram Message
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        message="A imagem Docker foi construída e enviada com sucesso!"
        curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
          -d "chat_id=${TELEGRAM_CHAT_ID}" \
          -d "text=${message}"

    - name: Limpar contêineres Docker antigos
      run: |
        docker stop ${{ secrets.DOCKER_USERNAME }}/docker_react:latest  # Para todos os contêineres em execução
        docker rm ${{ secrets.DOCKER_USERNAME }}/docker_react:latest    # Remove todos os contêineres parados
      if: always()  # Isso garantirá que a etapa seja executada, mesmo se etapas anteriores falharem
